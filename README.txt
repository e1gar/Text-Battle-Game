Текстовая боевая игра, где игрок и компьютер управляют героями с различными характеристиками.
Игра состоит из раундов, в каждом раунде игроки по очереди наносят урон друг другу,
пока у одного из героев не закончится здоровье.

Введите имя вашего героя: Kekius Maximus
Игра началась!
Kekius Maximus атакует Компьютер и наносит 15 урона.
У Компьютер осталось 85 здоровья.
Компьютер атакует Kekius Maximus и наносит 9 урона.
У Kekius Maximus осталось 91 здоровья.
Kekius Maximus атакует Компьютер и наносит 1 урона.
У Компьютер осталось 84 здоровья.
Компьютер атакует Kekius Maximus и наносит 14 урона.
У Kekius Maximus осталось 77 здоровья.
Kekius Maximus атакует Компьютер и наносит 9 урона.
У Компьютер осталось 75 здоровья.
Компьютер атакует Kekius Maximus и наносит 11 урона.
У Kekius Maximus осталось 66 здоровья.
Kekius Maximus атакует Компьютер и наносит 20 урона.
У Компьютер осталось 55 здоровья.
Компьютер атакует Kekius Maximus и наносит 10 урона.
У Kekius Maximus осталось 56 здоровья.
Kekius Maximus атакует Компьютер и наносит 8 урона.
У Компьютер осталось 47 здоровья.
Компьютер атакует Kekius Maximus и наносит 2 урона.
У Kekius Maximus осталось 54 здоровья.
Kekius Maximus атакует Компьютер и наносит 6 урона.
У Компьютер осталось 41 здоровья.
Компьютер атакует Kekius Maximus и наносит 3 урона.
У Kekius Maximus осталось 51 здоровья.
Kekius Maximus атакует Компьютер и наносит 16 урона.
У Компьютер осталось 25 здоровья.
Компьютер атакует Kekius Maximus и наносит 5 урона.
У Kekius Maximus осталось 46 здоровья.
Kekius Maximus атакует Компьютер и наносит 3 урона.
У Компьютер осталось 22 здоровья.
Компьютер атакует Kekius Maximus и наносит 9 урона.
У Kekius Maximus осталось 37 здоровья.
Kekius Maximus атакует Компьютер и наносит 4 урона.
У Компьютер осталось 18 здоровья.
Компьютер атакует Kekius Maximus и наносит 13 урона.
У Kekius Maximus осталось 24 здоровья.
Kekius Maximus атакует Компьютер и наносит 14 урона.
У Компьютер осталось 4 здоровья.
Компьютер атакует Kekius Maximus и наносит 20 урона.
У Kekius Maximus осталось 4 здоровья.
Kekius Maximus атакует Компьютер и наносит 5 урона.
У Компьютер осталось -1 здоровья.
Kekius Maximus побеждает!

Process finished with exit code 0

Разделение разработки текстовой боевой игры на этапы для Kanban-доски может выглядеть так:

### Этапы разработки и задачи:

#### **1. Инициализация проекта**
- Создать структуру проекта и файл для кода (`battle_game.py`).
- Определить основные классы (`Hero`, `Game`).
- Настроить среду разработки (установить Python, настроить виртуальное окружение).

#### **2. Реализация класса `Hero`**
- Создать класс `Hero` с атрибутами `name`, `health`, `attack_power`.
- Добавить метод `attack(other)` для нанесения урона.
- Добавить метод `is_alive()` для проверки, жив ли герой.
- Тестирование класса `Hero` (вызвать методы, проверить их корректность).

#### **3. Реализация класса `Game`**
- Создать класс `Game` с атрибутами `player` и `computer`.
- Добавить метод `start()` для запуска игрового цикла.
- Реализовать логику чередования ходов между игроком и компьютером.
- Реализовать вывод состояния героев (здоровье, атаки).

#### **4. Пользовательский ввод**
- Добавить ввод имени героя для игрока.
- Создать экземпляры героев (`player` и `computer`) на основе введенных данных и дефолтного имени компьютера.
- Проверить корректность обработки пользовательского ввода.

#### **5. Тестирование игрового процесса**
- Провести тестирование сценариев игры (победа игрока, победа компьютера, ничья невозможна).
- Убедиться, что игра корректно завершает цикл и выводит победителя.

#### **6. Финализация и улучшения**
- Добавить случайный урон в метод `attack()`.
- Улучшить текстовые сообщения для пользователя.
- Оптимизировать код (удалить неиспользуемые переменные, улучшить читаемость).

#### **7. Документация и публикация**
- Добавить комментарии и документацию к коду.
- Подготовить README-файл с описанием игры и инструкцией по запуску.
- Разместить проект на GitHub или другой платформе.

---

**To Do:**
- Создать структуру проекта.
- Реализовать класс `Hero`.
- Реализовать класс `Game`.

**In Progress:**
- Добавление пользовательского ввода.
- Логика чередования ходов.

**Testing:**
- Проверка класса `Hero`.
- Тестирование игрового процесса.

**Done:**
- Завершение метода `is_alive()`.
- Реализация метода `attack()`.
- Финализация и рефакторинг.